@page "/change-password"
@using EffortlessQA.UI.Services
@using EffortlessQA.Data.Dtos
@using MudBlazor
@inject AuthService AuthService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudCard Elevation="2" Class="pa-4 mx-auto" Style="max-width: 400px;">
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Change Password</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudForm @ref="_form" @bind-IsValid="@_isValid">
            <MudTextField Label="Current Password"
                          @bind-Value="_model.CurrentPassword"
                          InputType="InputType.Password"
                          Required="true"
                          RequiredError="Current password is required"
                          Variant="Variant.Outlined"
                          Margin="Margin.Dense"
                          Class="mb-4" />
            <MudTextField Label="New Password"
                          @bind-Value="_model.NewPassword"
                          InputType="InputType.Password"
                          Required="true"
                          RequiredError="New password is required"
                          Validation="@(new Func<string, string>(ValidateNewPassword))"
                          Variant="Variant.Outlined"
                          Margin="Margin.Dense"
                          Class="mb-4" />
            <MudTextField Label="Confirm New Password"
                          @bind-Value="_model.ConfirmPassword"
                          InputType="InputType.Password"
                          Required="true"
                          RequiredError="Confirm password is required"
                          Validation="@(new Func<string, string>(ValidateConfirmPassword))"
                          Variant="Variant.Outlined"
                          Margin="Margin.Dense"
                          Class="mb-4" />
        </MudForm>
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   Disabled="!_isValid"
                   OnClick="SubmitAsync"
                   Class="mr-2">
            Save
        </MudButton>
        <MudButton Variant="Variant.Text"
                   Color="Color.Secondary"
                   OnClick="Cancel">
            Cancel
        </MudButton>
    </MudCardActions>
</MudCard>

@code {
    private MudForm _form;
    private bool _isValid;
    private ChangePasswordModel _model = new();

    private class ChangePasswordModel
    {
        public string CurrentPassword { get; set; } = string.Empty;
        public string NewPassword { get; set; } = string.Empty;
        public string ConfirmPassword { get; set; } = string.Empty;
    }

    private string ValidateNewPassword(string newPassword)
    {
        if (string.IsNullOrWhiteSpace(newPassword))
            return "New password is required";
        if (newPassword.Length < 8)
            return "Password must be at least 8 characters long";
        if (!newPassword.Any(char.IsUpper))
            return "Password must contain at least one uppercase letter";
        if (!newPassword.Any(char.IsDigit))
            return "Password must contain at least one number";
        return null;
    }

    private string ValidateConfirmPassword(string confirmPassword)
    {
        if (confirmPassword != _model.NewPassword)
            return "Passwords do not match";
        return null;
    }

    private async Task SubmitAsync()
    {
        await _form.Validate();
        if (_isValid)
        {
            try
            {
                var userId = await AuthService.GetUserIdAsync(); // Get user ID
                await AuthService.ChangePasswordAsync(userId, _model.CurrentPassword, _model.NewPassword);
                Snackbar.Add("Password changed successfully", Severity.Success);
                NavigationManager.NavigateTo("/dashboard");
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error: {ex.Message}", Severity.Error);
            }
        }
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/dashboard");
    }
}