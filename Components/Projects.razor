@page "/projects"
@using ClosedXML.Excel
@using CsvHelper
@using EffortlessQA.UI.Components.dialogs
@using EffortlessQA.UI.Models
@using EffortlessQA.UI.Services
@using EffortlessQA.Data.Dtos
@using MudBlazor
@using System.Globalization
@using System.Text.Json
@inject ProjectService ProjectService
@inject CommonService CommonService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService

<MudThemeProvider Theme="_customTheme" />
<MudContainer MaxWidth="MaxWidth.False" Class="py-8 px-4 px-md-8">
    <MudGrid Spacing="0">
        <!-- Header -->
        <MudItem xs="12">
            <MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Manage Projects</MudText>
        </MudItem>

        <!-- Toolbar -->
        <MudItem xs="12">
            <MudPaper Elevation="2" Class="pa-4" Style="border-radius: 8px;">
                <MudGrid Spacing="2">
                    <MudItem xs="12" sm="4" md="3">
                        <MudTextField T="string"
                                      Label="Search Projects"
                                      Placeholder="Enter project name..."
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Search"
                                      @bind-Value="_searchTerm"
                                      DebounceInterval="500"
                                      OnDebounceIntervalElapsed="HandleSearchProjects"
                                      Variant="Variant.Outlined"
                                      Clearable="true"
                                      Class="mud-input-rounded" />
                    </MudItem>
                    <MudItem xs="12" sm="8" md="9" Class="d-flex align-center justify-end gap-2">
                        <div class="hover-container">
                            <MudIconButton Icon="@Icons.Material.Filled.Add"
                                           Color="Color.Primary"
                                           Size="Size.Medium"
                                           OnClick="@OpenCreateDialogAsync"
                                           OnMouseOver="@(() => LogHover("Add Project"))"
                                           AriaLabel="Add Project"
                                           Class="mx-1 expressive-icon" />
                            <MudText Typo="Typo.caption" Color="Color.Secondary" Class="hover-text">Add Project</MudText>
                        </div>
                        <div class="hover-container">
                            <MudIconButton Icon="@Icons.Material.Filled.Refresh"
                                           Color="Color.Secondary"
                                           Size="Size.Medium"
                                           OnClick="@RefreshProjectsAsync"
                                           OnMouseOver="@(() => LogHover("Refresh projects"))"
                                           AriaLabel="Refresh projects"
                                           Class="mx-1 expressive-icon" />
                            <MudText Typo="Typo.caption" Color="Color.Secondary" Class="hover-text">Refresh</MudText>
                        </div>
                        <div class="hover-container">
                            <MudIconButton Icon="@Icons.Material.Filled.TextSnippet"
                                           Color="Color.Default"
                                           Size="Size.Medium"
                                           OnClick="@ExportToCsvAsync"
                                           OnMouseOver="@(() => LogHover("Export to CSV"))"
                                           AriaLabel="Export to CSV"
                                           Class="mx-1 expressive-icon" />
                            <MudText Typo="Typo.caption" Color="Color.Secondary" Class="hover-text">Export CSV</MudText>
                        </div>
                        <div class="hover-container">
                            <MudIconButton Icon="@Icons.Material.Filled.GridOn"
                                           Color="Color.Default"
                                           Size="Size.Medium"
                                           OnClick="@ExportToExcelAsync"
                                           OnMouseOver="@(() => LogHover("Export to Excel"))"
                                           AriaLabel="Export to Excel"
                                           Class="mx-1 expressive-icon" />
                            <MudText Typo="Typo.caption" Color="Color.Secondary" Class="hover-text">Export Excel</MudText>
                        </div>
                        <div class="hover-container">
                            <MudIconButton Icon="@Icons.Material.Filled.PictureAsPdf"
                                           Color="Color.Default"
                                           Size="Size.Medium"
                                           OnClick="@ExportToPdfAsync"
                                           OnMouseOver="@(() => LogHover("Export to PDF"))"
                                           AriaLabel="Export to PDF"
                                           Class="mx-1 expressive-icon" />
                            <MudText Typo="Typo.caption" Color="Color.Secondary" Class="hover-text">Export PDF</MudText>
                        </div>
                        <div class="hover-container">
                            <MudIconButton Icon="@Icons.Material.Filled.CloudUpload"
                                           Color="Color.Primary"
                                           Size="Size.Medium"
                                           OnClick="@ImportFromFileAsync"
                                           OnMouseOver="@(() => LogHover("Import Excel/CSV"))"
                                           AriaLabel="Import Excel or CSV"
                                           Class="mx-1 expressive-icon" />
                            <MudText Typo="Typo.caption" Color="Color.Secondary" Class="hover-text">Import Excel/CSV</MudText>
                        </div>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>

        <!-- Table -->
        <MudItem xs="12">
            <MudPaper Elevation="2" Class="pa-4" Style="border-radius: 8px;">
                <MudTable ServerData="@(new Func<TableState, CancellationToken, Task<TableData<ProjectDto>>>(LoadProjectsAsync))"
                          @ref="_table"
                          Hover="true"
                          Breakpoint="Breakpoint.Sm"
                          Loading="@_isLoading"
                          Dense="true"
                          AllowMultiSelection="true"
                          @bind-SelectedItems="_selectedProjects"
                          Class="mud-table-clean"
                          RowsPerPage="@_pageSize">
                    <ToolBarContent>
                        <MudText Typo="Typo.subtitle1" Color="Color.Primary">Projects</MudText>
                        <MudSpacer />
                        @if (_selectedProjects.Any())
                        {
                            <MudButton Variant="Variant.Text"
                                       Color="Color.Error"
                                       StartIcon="@Icons.Material.Filled.Delete"
                                       OnClick="@BulkDeleteProjectsAsync"
                                       Size="Size.Small">Delete (@_selectedProjects.Count)</MudButton>
                        }
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>
                            <MudTableSortLabel SortLabel="name" T="ProjectDto">Name</MudTableSortLabel>
                        </MudTh>
                        <MudTh>
                            <MudTableSortLabel SortLabel="description" T="ProjectDto">Description</MudTableSortLabel>
                        </MudTh>
                        <MudTh Style="width: 100px; text-align: center;">Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd>
                            @if (context.IsEditing)
                            {
                                <MudTextField T="string"
                                              @bind-Value="context.Name"
                                              Required="true"
                                              RequiredError="Name is required"
                                              Variant="Variant.Outlined"
                                              Margin="Margin.Dense"
                                              Class="mud-input-compact" />
                            }
                            else
                            {
                                @context.Name
                            }
                        </MudTd>
                        <MudTd>
                            @if (context.IsEditing)
                            {
                                <MudTextField T="string"
                                              @bind-Value="context.Description"
                                              Required="true"
                                              RequiredError="Description is required"
                                              Variant="Variant.Outlined"
                                              Margin="Margin.Dense"
                                              Lines="2"
                                              Class="mud-input-compact" />
                            }
                            else
                            {
                                @context.Description
                            }
                        </MudTd>
                        <MudTd Style="text-align: center;">
                            @if (context.IsEditing)
                            {
                                <MudIconButton Icon="@Icons.Material.Filled.Save"
                                               Color="Color.Success"
                                               Size="Size.Small"
                                               OnClick="@(() => SaveInlineEditAsync(context))" />
                                <MudIconButton Icon="@Icons.Material.Filled.Cancel"
                                               Color="Color.Secondary"
                                               Size="Size.Medium"
                                               OnClick="@(() => CancelInlineEdit(context))" />
                            }
                            else
                            {
                                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                               Color="Color.Primary"
                                               Size="Size.Small"
                                               OnClick="@(() => StartInlineEdit(context))" />
                                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                               Color="Color.Error"
                                               Size="Size.Small"
                                               OnClick="@(() => DeleteProjectAsync(context.Id))" />
                            }
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                    <LoadingContent>
                        <MudProgressLinear Indeterminate="true" Color="Color.Primary" Class="my-4" />
                    </LoadingContent>
                    <NoRecordsContent>
                        <MudPaper Elevation="0" Class="pa-8 d-flex flex-column align-center justify-center" Style="min-height: 400px; background: transparent;">
                            <MudIcon Icon="@Icons.Material.Filled.FolderOpen" Size="Size.Large" Color="Color.Primary" Class="mb-4" />
                            <MudText Typo="Typo.h6" Color="Color.Primary" Align="Align.Center">No Projects Found</MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary" Align="Align.Center" Class="mb-6 mt-3">
                                Click "Add Project" above to create your first project.
                            </MudText>
                        </MudPaper>
                    </NoRecordsContent>
                </MudTable>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

<MudDialog @bind-Visible="_showCreateDialog" Options="new DialogOptions { MaxWidth = MaxWidth.Small, FullWidth = true, CloseButton = true }">
    <DialogContent>
        <MudGrid Class="pa-4">
            <MudItem xs="12">
                <MudText Typo="Typo.h6" Color="Color.Primary" Class="mb-4">Create New Project</MudText>
                <MudForm @ref="_form" @bind-IsValid="_formIsValid" Class="d-flex flex-column gap-4">
                    <MudTextField T="string"
                                  Label="Project Name"
                                  @bind-Value="_newProject.Name"
                                  Required="true"
                                  RequiredError="Name is required"
                                  Validation="@(new Func<string, string>(ValidateName))"
                                  Variant="Variant.Outlined"
                                  Clearable="true"
                                  HelperText="Enter a unique project name (min 3 characters)"
                                  Class="mud-input-rounded" />
                    <MudTextField T="string"
                                  Label="Description"
                                  @bind-Value="_newProject.Description"
                                  Required="true"
                                  RequiredError="Description is required"
                                  Lines="4"
                                  Variant="Variant.Outlined"
                                  Clearable="true"
                                  HelperText="Describe the project briefly"
                                  Class="mud-input-rounded" />
                </MudForm>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@CancelCreate" Variant="Variant.Text" Color="Color.Secondary">Cancel</MudButton>
        <MudButton OnClick="@CreateProjectAsync" Variant="Variant.Filled" Color="Color.Primary" Disabled="!_formIsValid">Create</MudButton>
    </DialogActions>
</MudDialog>

@code {
    #region Fields
    private DateTime? _lastFetchTime;
    private readonly TimeSpan _debounceInterval = TimeSpan.FromSeconds(1);
    private CreateProjectDto _newProject = new();
    private bool _showCreateDialog;
    private string _searchTerm = string.Empty;
    private bool _isLoading;
    private MudTable<ProjectDto> _table;
    private HashSet<ProjectDto> _selectedProjects = new();
    private MudForm _form;
    private bool _formIsValid;
    private int _pageSize = 10; // Default page size
    private Dictionary<Guid, ProjectDto> _originalProjects = new();
    private readonly MudTheme _customTheme = new()
        {
            PaletteLight = new PaletteLight
            {
                Primary = "#1976D2",
                Secondary = "#FF4081",
                Background = "#F5F7FA",
                Surface = "#FFFFFF",
                TextPrimary = "#212121",
                TextSecondary = "#757575",
                AppbarBackground = "#1976D2",
                ActionDefault = "#212121"
            },
            PaletteDark = new PaletteDark
            {
                Primary = "#2196F3",
                Secondary = "#F50057",
                Background = "#121212",
                Surface = "#1E1E1E",
                TextPrimary = "#FFFFFF",
                TextSecondary = "#B0BEC5",
                AppbarBackground = "#2196F3",
                ActionDefault = "#FFFFFF"
            },
            LayoutProperties = new LayoutProperties
            {
                DefaultBorderRadius = "8px"
            }
        };

    #endregion

    #region Lifecycle

    protected override async Task OnInitializedAsync()
    {
        // Initialize table data
        Console.WriteLine("Projects.razor: OnInitializedAsync called");

    }

    #endregion

    #region Table Operations
    private async Task<TableData<ProjectDto>> LoadProjectsAsync(TableState state, CancellationToken cancellationToken)
    {
        if (_lastFetchTime.HasValue && (DateTime.UtcNow - _lastFetchTime.Value) < _debounceInterval)
        {
            Console.WriteLine("Projects.razor: Skipped duplicate fetch due to debounce");
            return new TableData<ProjectDto> { TotalItems = 0, Items = new List<ProjectDto>() };
        }

        _isLoading = true;
        _lastFetchTime = DateTime.UtcNow;
        try
        {
            Console.WriteLine($"Projects.razor: Loading page {state.Page + 1} with {_pageSize} rows, SortLabel={state.SortLabel}, SortDirection={state.SortDirection}");
            var query = new ProjectQuery
            {
                SearchTerm = _searchTerm,
                SortBy = state.SortLabel,
                SortDirection = state.SortDirection == SortDirection.Ascending ? "asc" : "desc",
                Page = state.Page + 1,
                PageSize = _pageSize
            };

            var result = await ProjectService.GetPagedProjectsAsync(query, cancellationToken);
            Console.WriteLine($"Projects.razor: Loaded {result.Items?.Count ?? 0} projects");
            return new TableData<ProjectDto> { TotalItems = result.TotalCount, Items = result.Items };
        }
        catch (HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            var responseContent = ex.Message.Contains(" - ") ? ex.Message.Split(" - ")[1] : "No response content";
            Console.WriteLine($"Projects.razor: Unauthorized Error: {ex.Message}, Response: {responseContent}");
            Snackbar.Add($"Unauthorized: Please check your permissions or login again. Details: {responseContent}", Severity.Error);
            NavigationManager.NavigateTo("/login");
            return new TableData<ProjectDto> { TotalItems = 0, Items = new List<ProjectDto>() };
        }
        catch (Exception ex)
        {
            var message = ex.InnerException != null ? $"{ex.Message}: {ex.InnerException.Message}" : ex.Message;
            Console.WriteLine($"Projects.razor: Error loading projects: {message}\nStackTrace: {ex.StackTrace}");
            Snackbar.Add($"Failed to load projects: {message}", Severity.Error);
            return new TableData<ProjectDto> { TotalItems = 0, Items = new List<ProjectDto>() };
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task OnPageSizeChanged(int newSize)
    {
        if (_isLoading) return;
        _isLoading = true;
        try
        {
            _pageSize = newSize;
            Console.WriteLine($"Projects.razor: Page size changed to {_pageSize}");
            if (_table != null)
            {
                _table.NavigateTo(0); // Reset to first page
                _table.SetRowsPerPage(newSize); // Update table's RowsPerPage
                await _table.ReloadServerData();
            }
            Snackbar.Add($"Page size changed to {_pageSize}", Severity.Info);
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task HandleSearchProjects(string term)
    {
        _searchTerm = term;
        await _table.ReloadServerData();
    }

    private async Task RefreshProjectsAsync()
    {
        await _table.ReloadServerData();
        Snackbar.Add("Projects refreshed successfully", Severity.Success);
    }

    private void StartInlineEdit(ProjectDto project)
    {
        project.IsEditing = true;
        _originalProjects[project.Id] = new ProjectDto
            {
                Id = project.Id,
                Name = project.Name,
                Description = project.Description,
                TenantId = project.TenantId
            };
    }

    private async Task SaveInlineEditAsync(ProjectDto project)
    {
        var nameValidationResult = ValidateName(project.Name);
        if (nameValidationResult != null)
        {
            Snackbar.Add(nameValidationResult, Severity.Error);
            return;
        }

        if (string.IsNullOrWhiteSpace(project.Description))
        {
            Snackbar.Add("Description cannot be empty", Severity.Error);
            return;
        }

        try
        {
            await ProjectService.UpdateProjectAsync(project);
            project.IsEditing = false;
            _originalProjects.Remove(project.Id);
            Snackbar.Add("Project updated successfully", Severity.Success);
        }
        catch (HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            Snackbar.Add("Unauthorized: Please check your permissions or login again.", Severity.Error);
            NavigationManager.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to update project: {ex.Message}", Severity.Error);
            Console.WriteLine($"Error updating project: {ex}");
        }
    }

    private void CancelInlineEdit(ProjectDto project)
    {
        if (_originalProjects.TryGetValue(project.Id, out var original))
        {
            project.Name = original.Name;
            project.Description = original.Description;
            project.IsEditing = false;
            _originalProjects.Remove(project.Id);
        }
    }

    private async Task DeleteProjectAsync(Guid id)
    {
        var parameters = new DialogParameters { { "ContentText", "Are you sure you want to delete this project?" } };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                await ProjectService.DeleteProjectAsync(id);
                await _table.ReloadServerData();
                Snackbar.Add("Project deleted successfully", Severity.Success);
            }
            catch (HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                Snackbar.Add("Unauthorized: Please check your permissions or login again.", Severity.Error);
                NavigationManager.NavigateTo("/login");
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Failed to delete project: {ex.Message}", Severity.Error);
                Console.WriteLine($"Error deleting project: {ex}");
            }
        }
    }

    private async Task BulkDeleteProjectsAsync()
    {
        var parameters = new DialogParameters { { "ContentText", $"Are you sure you want to delete {_selectedProjects.Count} projects?" } };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Confirm Bulk Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                foreach (var project in _selectedProjects.ToList())
                {
                    await ProjectService.DeleteProjectAsync(project.Id);
                }
                await _table.ReloadServerData();
                _selectedProjects.Clear();
                Snackbar.Add("Selected projects deleted successfully", Severity.Success);
            }
            catch (HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                Snackbar.Add("Unauthorized: Please check your permissions or login again.", Severity.Error);
                NavigationManager.NavigateTo("/login");
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Failed to delete projects: {ex.Message}", Severity.Error);
                Console.WriteLine($"Error deleting projects: {ex}");
            }
        }
    }

    #endregion

    #region Dialog Operations

    private async Task OpenCreateDialogAsync()
    {
        _newProject = new CreateProjectDto { Status = "Active" };
        _showCreateDialog = true;
        await Task.Run(() => _form?.ResetValidation());
    }

    private void CancelCreate()
    {
        _showCreateDialog = false;
        _newProject = new CreateProjectDto();
        _form?.ResetValidation();
    }

    private async Task CreateProjectAsync()
    {
        if (!_formIsValid || string.IsNullOrWhiteSpace(_newProject.Description))
        {
            Snackbar.Add("Description cannot be empty", Severity.Error);
            return;
        }

        try
        {
            await ProjectService.CreateProjectAsync(_newProject);
            await _table.ReloadServerData();
            _showCreateDialog = false;
            _newProject = new CreateProjectDto();
            _form?.ResetValidation();
            Snackbar.Add("Project created successfully", Severity.Success);
        }
        catch (HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            Snackbar.Add("Unauthorized: Please check your permissions or login again.", Severity.Error);
            NavigationManager.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to create project: {ex.Message}", Severity.Error);
            Console.WriteLine($"Error creating project: {ex}");
        }
    }

    #endregion

    #region Export/Import

    private async Task ExportToCsvAsync()
    {
        try
        {
            var query = new ProjectQuery { Page = 1, PageSize = 1000, SearchTerm = _searchTerm };
            var result = await ProjectService.GetPagedProjectsAsync(query);
            var projects = result.Items;

            if (projects == null || !projects.Any())
            {
                Snackbar.Add("No projects found to export.", Severity.Warning);
                return;
            }

            using var memoryStream = new MemoryStream();
            using var writer = new StreamWriter(memoryStream);
            using var csv = new CsvWriter(writer, CultureInfo.InvariantCulture);
            csv.WriteRecords(projects);
            await writer.FlushAsync();
            memoryStream.Position = 0;

            var csvBytes = memoryStream.ToArray();
            var base64Data = Convert.ToBase64String(csvBytes);
            await JSRuntime.InvokeVoidAsync("downloadFileFromBase64",
                "ProjectsExport.csv",
                "text/csv",
                base64Data);

            Snackbar.Add("Projects exported to CSV successfully", Severity.Success);
        }
        catch (HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            Snackbar.Add("Unauthorized: Please check your permissions or login again.", Severity.Error);
            NavigationManager.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to export projects: {ex.Message}", Severity.Error);
            Console.WriteLine($"Error exporting to CSV: {ex}");
        }
    }

    private async Task ExportToExcelAsync()
    {
        try
        {
            var query = new ProjectQuery { Page = 1, PageSize = 1000, SearchTerm = _searchTerm };
            var result = await ProjectService.GetPagedProjectsAsync(query);
            var projects = result.Items;

            if (projects == null || !projects.Any())
            {
                Snackbar.Add("No projects found to export.", Severity.Warning);
                return;
            }

            using var workbook = new XLWorkbook();
            var worksheet = workbook.Worksheets.Add("Projects");

            // Add header
            worksheet.Cell("A1").Value = "ID";
            worksheet.Cell("B1").Value = "Name";
            worksheet.Cell("C1").Value = "Description";

            // Add rows
            var row = 2;
            foreach (var p in projects)
            {
                worksheet.Cell($"A{row}").Value = p.Id.ToString();
                worksheet.Cell($"B{row}").Value = p.Name;
                worksheet.Cell($"C{row}").Value = p.Description;
                row++;
            }

            using var stream = new MemoryStream();
            workbook.SaveAs(stream);
            stream.Position = 0;

            var bytes = stream.ToArray();
            var base64Data = Convert.ToBase64String(bytes);
            await JSRuntime.InvokeVoidAsync("downloadFileFromBase64",
                "ProjectsExport.xlsx",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                base64Data);

            Snackbar.Add("Projects exported to Excel successfully", Severity.Success);
        }
        catch (HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            Snackbar.Add("Unauthorized: Please check your permissions or login again.", Severity.Error);
            NavigationManager.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to export projects: {ex.Message}", Severity.Error);
            Console.WriteLine($"Error exporting to Excel: {ex}");
        }
    }

    private async Task ExportToPdfAsync(dynamic query = null)
    {
        try
        {
            // Fetch projects
            var queryParams = new ProjectQuery { Page = 1, PageSize = 1000, SearchTerm = _searchTerm };
            var result = await ProjectService.GetPagedProjectsAsync(queryParams);
            var projects = result.Items;

            if (projects == null || !projects.Any())
            {
                Snackbar.Add("No projects found to export.", Severity.Warning);
                Console.WriteLine("No projects returned from ProjectService.");
                return;
            }

            Console.WriteLine($"Found {projects.Count} projects:");
            foreach (var project in projects)
            {
                Console.WriteLine($"Project: Id={project.Id}, Name={project?.Name ?? "null"}, Description={project?.Description ?? "null"}");
            }

            // Prepare PDF request
            var pdfRequest = new PdfGenerationDto
                {
                    Title = "Projects Report",
                    FileName = "Projects_Report.pdf",
                    FontSizeTitle = 16,
                    FontSizeHeader = 12,
                    FontSizeBody = 10,
                    Columns = new List<PdfColumnDto>
                {
                    new PdfColumnDto { Field = "id", Header = "ID" },
                    new PdfColumnDto { Field = "name", Header = "Name" },
                    new PdfColumnDto { Field = "description", Header = "Description" }
                },
                    Data = projects.Select(p => new Dictionary<string, string>
                {
                    { "id", p.Id.ToString() },
                    { "name", p.Name ?? "" },
                    { "description", p.Description ?? "" }
                }).ToList()
                };

            Console.WriteLine($"PDF Data: {JsonSerializer.Serialize(pdfRequest.Data, new JsonSerializerOptions { WriteIndented = true })}");

            // Generate PDF
            var pdfBytes = await CommonService.GeneratePdfAsync(pdfRequest);
            var base64Data = Convert.ToBase64String(pdfBytes);
            await JSRuntime.InvokeVoidAsync("downloadFileFromBase64",
                "Projects_Report.pdf",
                "application/pdf",
                base64Data);

            Snackbar.Add("Projects exported to PDF successfully", Severity.Success);
        }
        catch (HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            Snackbar.Add("Unauthorized: Please check your permissions or login again.", Severity.Error);
            NavigationManager.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            var message = ex.InnerException != null ? $"{ex.Message}: {ex.InnerException.Message}" : ex.Message;
            Snackbar.Add($"Failed to export projects: {message}", Severity.Error);
            Console.WriteLine($"Error exporting to PDF: {ex}");
        }
    }

    private async Task ImportFromFileAsync()
    {
        var parameters = new DialogParameters
        {
            { "OnFileUploaded", new EventCallback<string>(this, ImportCsvContentAsync) }
        };

        var options = new DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true
            };

        await DialogService.ShowAsync<FileUploadDialog>("Import Projects from CSV", parameters, options);
    }

    private async Task ImportCsvContentAsync(string csvContent)
    {
        try
        {
            using var reader = new StringReader(csvContent);
            using var csv = new CsvReader(reader, CultureInfo.InvariantCulture);
            var records = csv.GetRecords<CreateProjectDto>().ToList();
            foreach (var project in records)
            {
                if (!string.IsNullOrWhiteSpace(project?.Name) && !string.IsNullOrWhiteSpace(project?.Description))
                {
                    await ProjectService.CreateProjectAsync(project);
                }
            }

            await _table.ReloadServerData();
            Snackbar.Add("Projects imported successfully", Severity.Success);
        }
        catch (HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            Snackbar.Add("Unauthorized: Please check your permissions or login again.", Severity.Error);
            NavigationManager.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to import projects: {ex.Message}", Severity.Error);
            Console.WriteLine($"Error importing CSV: {ex}");
        }
    }

    #endregion

    #region Validation

    private string ValidateName(string name)
    {
        if (string.IsNullOrWhiteSpace(name))
            return "Name is required";
        if (name.Length < 3)
            return "Name must be at least 3 characters long";
        return null;
    }

    #endregion

    #region Helpers

    private void LogHover(string action)
    {
        Console.WriteLine($"Hovered: {action}");
        Snackbar.Add($"Hovered: {action}", Severity.Info);
    }

    #endregion
}