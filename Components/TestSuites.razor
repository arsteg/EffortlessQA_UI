@page "/test-suites"
@using ClosedXML.Excel
@using CsvHelper
@using EffortlessQA.UI.Components.common
@using EffortlessQA.UI.Components.dialogs
@using EffortlessQA.UI.Models
@using EffortlessQA.UI.Services
@using EffortlessQA.Data.Dtos
@using MudBlazor
@using System.Globalization
@using System.Text.Json
@inject TestSuiteService TestSuiteService
@inject CommonService CommonService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService
@inject ProjectService ProjectService
@inject RequirementService RequirementService
@inject ApplicationContextService ApplicationContextService

<MudThemeProvider Theme="_customTheme" />
<MudContainer MaxWidth="MaxWidth.False" Class="py-8 px-4 px-md-8">
    <MudGrid Spacing="4">
        <!-- Header -->
        <MudItem xs="12">
            <MudText Typo="Typo.h5" Color="Color.Primary" Class="mb-4">Manage Test Suites</MudText>
        </MudItem>

        <!-- Toolbar -->
        <MudItem xs="12">
            <MudPaper Elevation="2" Class="pa-4" Style="border-radius: 8px;">
                <MudGrid Spacing="2">
                    <MudItem xs="12" sm="4" md="3">
                        <MudTextField T="string"
                                      Label="Search Test Suites"
                                      Placeholder="Enter test suite name..."
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Search"
                                      @bind-Value="_searchTerm"
                                      DebounceInterval="500"
                                      OnDebounceIntervalElapsed="HandleSearchTestSuites"
                                      Variant="Variant.Outlined"
                                      Clearable="true"
                                      Class="mud-input-rounded" />
                    </MudItem>
                    <MudItem xs="12" sm="8" md="9" Class="d-flex align-center justify-end gap-2">
                        <div class="hover-container">
                            <MudIconButton Icon="@Icons.Material.Filled.Add"
                                           Color="Color.Primary"
                                           Size="Size.Medium"
                                           OnClick="@OpenCreateDialogAsync"
                                           OnMouseOver="@(() => LogHover("Add Test Suite"))"
                                           AriaLabel="Add Test Suite"
                                           Class="mx-1 expressive-icon" />
                            <MudText Typo="Typo.caption" Color="Color.Secondary" Class="hover-text">Add Test Suite</MudText>
                        </div>
                        <div class="hover-container">
                            <MudIconButton Icon="@Icons.Material.Filled.Refresh"
                                           Color="Color.Secondary"
                                           Size="Size.Medium"
                                           OnClick="@RefreshTestSuitesAsync"
                                           OnMouseOver="@(() => LogHover("Refresh test suites"))"
                                           AriaLabel="Refresh test suites"
                                           Class="mx-1 expressive-icon" />
                            <MudText Typo="Typo.caption" Color="Color.Secondary" Class="hover-text">Refresh</MudText>
                        </div>
                        <div class="hover-container">
                            <MudIconButton Icon="@Icons.Material.Filled.TextSnippet"
                                           Color="Color.Default"
                                           Size="Size.Medium"
                                           OnClick="@ExportToCsvAsync"
                                           OnMouseOver="@(() => LogHover("Export to CSV"))"
                                           AriaLabel="Export to CSV"
                                           Class="mx-1 expressive-icon" />
                            <MudText Typo="Typo.caption" Color="Color.Secondary" Class="hover-text">Export CSV</MudText>
                        </div>
                        <div class="hover-container">
                            <MudIconButton Icon="@Icons.Material.Filled.GridOn"
                                           Color="Color.Default"
                                           Size="Size.Medium"
                                           OnClick="@ExportToExcelAsync"
                                           OnMouseOver="@(() => LogHover("Export to Excel"))"
                                           AriaLabel="Export to Excel"
                                           Class="mx-1 expressive-icon" />
                            <MudText Typo="Typo.caption" Color="Color.Secondary" Class="hover-text">Export Excel</MudText>
                        </div>
                        <div class="hover-container">
                            <MudIconButton Icon="@Icons.Material.Filled.PictureAsPdf"
                                           Color="Color.Default"
                                           Size="Size.Medium"
                                           OnClick="@ExportToPdfAsync"
                                           OnMouseOver="@(() => LogHover("Export to PDF"))"
                                           AriaLabel="Export to PDF"
                                           Class="mx-1 expressive-icon" />
                            <MudText Typo="Typo.caption" Color="Color.Secondary" Class="hover-text">Export PDF</MudText>
                        </div>
                        <div class="hover-container">
                            <MudIconButton Icon="@Icons.Material.Filled.CloudUpload"
                                           Color="Color.Primary"
                                           Size="Size.Medium"
                                           OnClick="@ImportFromFileAsync"
                                           OnMouseOver="@(() => LogHover("Import Excel/CSV"))"
                                           AriaLabel="Import Excel or CSV"
                                           Class="mx-1 expressive-icon" />
                            <MudText Typo="Typo.caption" Color="Color.Secondary" Class="hover-text">Import Excel/CSV</MudText>
                        </div>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>

        <!-- Table -->
        <MudItem xs="12">
            <MudPaper Elevation="2" Class="pa-4" Style="border-radius: 8px;">
                <MudTable ServerData="@(new Func<TableState, CancellationToken, Task<TableData<TestSuiteDto>>>(LoadTestSuitesAsync))"
                          @ref="_table"
                          Hover="true"
                          Breakpoint="Breakpoint.Sm"
                          Loading="@_isLoading"
                          Dense="true"
                          AllowMultiSelection="true"
                          @bind-SelectedItems="_selectedTestSuites"
                          Class="mud-table-clean"
                          RowsPerPage="@_pageSize">
                    <ToolBarContent>
                        <MudText Typo="Typo.subtitle1" Color="Color.Primary">Test Suites</MudText>
                        <MudSpacer />
                        @if (_selectedTestSuites.Any())
                        {
                            <MudButton Variant="Variant.Text"
                                       Color="Color.Error"
                                       StartIcon="@Icons.Material.Filled.Delete"
                                       OnClick="@BulkDeleteTestSuitesAsync"
                                       Size="Size.Small">Delete (@_selectedTestSuites.Count)</MudButton>
                        }
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh Style="width: 40px;"></MudTh> <!-- For expand/collapse -->
                        <MudTh>
                            <MudTableSortLabel SortLabel="name" T="TestSuiteDto" InitialDirection="SortDirection.Ascending">Name</MudTableSortLabel>
                        </MudTh>
                        <MudTh>
                            <MudTableSortLabel SortLabel="description" T="TestSuiteDto">Description</MudTableSortLabel>
                        </MudTh>
                        <MudTh>Project</MudTh>
                        <MudTh>Parent Suite</MudTh>
                        <MudTh>Requirement</MudTh>
                        <MudTh Style="width: 150px; text-align: center;">Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd Style="vertical-align: middle;">
                            @if (context.Children.Any())
                            {
                                <div style="display: flex; align-items: center;">
                                    <MudIconButton Icon="@(_expandedTestSuites.Contains(context.Id) ? Icons.Material.Filled.ExpandLess : Icons.Material.Filled.ExpandMore)"
                                                   Size="Size.Small"
                                                   OnClick="@(() => ToggleExpand(context.Id))" />
                                </div>
                            }
                        </MudTd>
                        <MudTd>
                            @if (context.IsEditing)
                            {
                                <MudTextField T="string"
                                              @bind-Value="context.Name"
                                              Required="true"
                                              RequiredError="Name is required"
                                              Variant="Variant.Outlined"
                                              Margin="Margin.Dense"
                                              Class="mud-input-compact" />
                            }
                            else
                            {
                                @context.Name
                            }
                        </MudTd>
                        <MudTd>
                            @if (context.IsEditing)
                            {
                                <MudTextField T="string"
                                              @bind-Value="context.Description"
                                              Variant="Variant.Outlined"
                                              Margin="Margin.Dense"
                                              Lines="2"
                                              Class="mud-input-compact" />
                            }
                            else
                            {
                                <MudTd><div>@((MarkupString)context.Description)</div></MudTd>
                            }
                        </MudTd>
                        <MudTd>
                            @(_projects.FirstOrDefault(p => p.Id == context.ProjectId)?.Name ?? "None")
                        </MudTd>
                        <MudTd>
                            @(_parentTestSuites.FirstOrDefault(p => p.Id == context.ParentSuiteId)?.Name ?? "None")
                        </MudTd>
                        <MudTd>
                            @(_requirements.FirstOrDefault(r => r.Id == context.RequirementId)?.Title ?? "None")
                        </MudTd>
                        <MudTd Style="display: flex; justify-content: center; gap: 8px; vertical-align: middle;">
                            @if (context.IsEditing)
                            {
                                <MudIconButton Icon="@Icons.Material.Filled.Save"
                                               Color="Color.Success"
                                               Size="Size.Small"
                                               OnClick="@(() => SaveInlineEditAsync(context))" />
                                <MudIconButton Icon="@Icons.Material.Filled.Cancel"
                                               Color="Color.Secondary"
                                               Size="Size.Small"
                                               OnClick="@(() => CancelInlineEdit(context))" />
                            }
                            else
                            {
                                <MudIconButton Icon="@Icons.Material.Filled.Add"
                                               Color="Color.Success"
                                               Size="Size.Small"
                                               OnClick="@(() => OpenCreateDialogEditAsync(context.Id))" />
                                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                               Color="Color.Primary"
                                               Size="Size.Small"
                                               OnClick="@(() => StartInlineEdit(context))" />
                                <MudIconButton Icon="@Icons.Material.Filled.NoteAlt"
                                               Color="Color.Info"
                                               Size="Size.Small"
                                               OnClick="@(() => OpenEditDialogAsync(context))" />
                                <MudIconButton Icon="@Icons.Material.Filled.Link"
                                               Color="Color.Info"
                                               Size="Size.Small"
                                               OnClick="@(() => OpenLinkRequirementDialogAsync(context))"
                                               Disabled="@(context.RequirementId.HasValue)" />
                                <MudIconButton Icon="@Icons.Material.Filled.LinkOff"
                                               Color="Color.Warning"
                                               Size="Size.Small"
                                               OnClick="@(() => UnlinkTestSuiteFromRequirementAsync(context.Id, context.ProjectId, context.RequirementId))"
                                               Disabled="@(!context.RequirementId.HasValue)" />
                                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                               Color="Color.Error"
                                               Size="Size.Small"
                                               OnClick="@(() => DeleteTestSuiteAsync(context.Id, context.ProjectId))" />
                            }
                        </MudTd>
                    </RowTemplate>
                    <ChildRowContent>
                        @if (_expandedTestSuites.Contains(context.Id))
                        {
                            @foreach (var child in context.Children)
                            {
                                <tr class="child-row">
                                    <td style="vertical-align: middle; padding-left: @(20 * GetDepth(child))px;">
                                        @if (child.Children.Any())
                                        {
                                            <div style="display: flex; align-items: center;">
                                                <MudIconButton Icon="@(_expandedTestSuites.Contains(child.Id) ? Icons.Material.Filled.ExpandLess : Icons.Material.Filled.ExpandMore)"
                                                               Size="Size.Small"
                                                               OnClick="@(() => ToggleExpand(child.Id))" />
                                            </div>
                                        }
                                    </td>
                                    <td style="vertical-align: middle;">
                                        @if (child.IsEditing)
                                        {
                                            <MudTextField T="string"
                                                          @bind-Value="child.Name"
                                                          Required="true"
                                                          RequiredError="Name is required"
                                                          Variant="Variant.Outlined"
                                                          Margin="Margin.Dense"
                                                          Class="mud-input-compact" />
                                        }
                                        else
                                        {
                                            @child.Name
                                        }
                                    </td>
                                    <td style="vertical-align: middle;">
                                        @if (child.IsEditing)
                                        {
                                            <MudTextField T="string"
                                                          @bind-Value="child.Description"
                                                          Variant="Variant.Outlined"
                                                          Margin="Margin.Dense"
                                                          Lines="2"
                                                          Class="mud-input-compact" />
                                        }
                                        else
                                        {
                                            <div>@((MarkupString)child.Description)</div>
                                        }
                                    </td>
                                    <td style="vertical-align: middle;">
                                        @(_projects.FirstOrDefault(p => p.Id == child.ProjectId)?.Name ?? "None")
                                    </td>
                                    <td style="vertical-align: middle;">
                                        @(_parentTestSuites.FirstOrDefault(p => p.Id == child.ParentSuiteId)?.Name ?? "None")
                                    </td>
                                    <td style="vertical-align: middle;">
                                        @(_requirements.FirstOrDefault(r => r.Id == child.RequirementId)?.Title ?? "None")
                                    </td>
                                    <td style="display: flex; justify-content: center; gap: 8px; vertical-align: middle;">
                                        @if (child.IsEditing)
                                        {
                                            <MudIconButton Icon="@Icons.Material.Filled.Save"
                                                           Color="Color.Success"
                                                           Size="Size.Small"
                                                           OnClick="@(() => SaveInlineEditAsync(child))" />
                                            <MudIconButton Icon="@Icons.Material.Filled.Cancel"
                                                           Color="Color.Secondary"
                                                           Size="Size.Small"
                                                           OnClick="@(() => CancelInlineEdit(child))" />
                                        }
                                        else
                                        {
                                            <MudIconButton Icon="@Icons.Material.Filled.Add"
                                                           Color="Color.Success"
                                                           Size="Size.Small"
                                                           OnClick="@(() => OpenCreateDialogEditAsync(child.Id))" />
                                            <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                                           Color="Color.Primary"
                                                           Size="Size.Small"
                                                           OnClick="@(() => StartInlineEdit(child))" />
                                            <MudIconButton Icon="@Icons.Material.Filled.NoteAlt"
                                                           Color="Color.Info"
                                                           Size="Size.Small"
                                                           OnClick="@(() => OpenEditDialogAsync(child))" />
                                            <MudIconButton Icon="@Icons.Material.Filled.Link"
                                                           Color="Color.Info"
                                                           Size="Size.Small"
                                                           OnClick="@(() => OpenLinkRequirementDialogAsync(child))"
                                                           Disabled="@(child.RequirementId.HasValue)" />
                                            <MudIconButton Icon="@Icons.Material.Filled.LinkOff"
                                                           Color="Color.Warning"
                                                           Size="Size.Small"
                                                           OnClick="@(() => UnlinkTestSuiteFromRequirementAsync(child.Id, child.ProjectId, child.RequirementId))"
                                                           Disabled="@(!child.RequirementId.HasValue)" />
                                            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                                           Color="Color.Error"
                                                           Size="Size.Small"
                                                           OnClick="@(() => DeleteTestSuiteAsync(child.Id, child.ProjectId))" />
                                        }
                                    </td>
                                </tr>
                                @if (_expandedTestSuites.Contains(child.Id))
                                {
                                    @RenderChildRows(child, 2)
                                }
                            }
                        }
                    </ChildRowContent>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                    <LoadingContent>
                        <MudProgressLinear Indeterminate="true" Color="Color.Primary" Class="my-4" />
                    </LoadingContent>
                    <NoRecordsContent>
                        <MudPaper Elevation="0" Class="pa-8 d-flex flex-column align-center justify-center" Style="min-height: 400px; background: transparent;">
                            <MudIcon Icon="@Icons.Material.Filled.FolderOpen" Size="Size.Large" Color="Color.Primary" Class="mb-4" />
                            <MudText Typo="Typo.h6" Color="Color.Primary" Align="Align.Center">No Test Suites Found</MudText>
                            <MudText Typo="Typo.body2" Color="Color.Secondary" Align="Align.Center" Class="mb-6 mt-3">
                                Click "Add Test Suite" above to create your first test suite.
                            </MudText>
                        </MudPaper>
                    </NoRecordsContent>
                </MudTable>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

<!-- Create New Test Suite Dialog -->
<MudDialog @bind-Visible="_showCreateDialog" Options="new DialogOptions { MaxWidth = MaxWidth.Large, FullWidth = true, CloseButton = true }" Style="min-height: 80vh; max-height: 90vh;">
    <DialogContent>
        <MudGrid Class="pa-6">
            <MudItem xs="12">
                <MudText Typo="Typo.h6" Color="Color.Primary" Class="mb-4">Create New Test Suite</MudText>
                <MudForm @ref="_form" @bind-IsValid="_formIsValid" Class="d-flex flex-column gap-6">
                    <MudTextField T="string"
                                  Label="Test Suite Name"
                                  @bind-Value="_newTestSuite.Name"
                                  Required="true"
                                  RequiredError="Name is required"
                                  Validation="@(new Func<string, string>(ValidateName))"
                                  Variant="Variant.Outlined"
                                  Clearable="true"
                                  AutoFocus="true"
                                  Margin="Margin.Normal"
                                  HelperText="Enter a unique test suite name (min 3 characters)"
                                  Class="mud-input-rounded" />
                    <MudText Typo="Typo.subtitle1">Description</MudText>
                    <BlazorRichTextEditor @bind-Value="_newTestSuite.Description" EntityId="@_newTestSuite.Id.ToString()" ProjectId="@ApplicationContextService.SelectedProjectId.ToString()" EntityType="TestSuites" FieldName="Description" />
                    <MudSelect T="Guid?"
                               Label="Requirement"
                               @bind-Value="_newTestSuite.RequirementId"
                               Variant="Variant.Outlined"
                               Class="mud-input-rounded"
                               AnchorOrigin="Origin.BottomCenter"
                               TransformOrigin="Origin.TopCenter"
                               ToStringFunc="@(id => id.HasValue ? _requirements.FirstOrDefault(r => r.Id == id)?.Title ?? "None" : "None")">
                        <MudSelectItem T="Guid?" Value="@((Guid?)null)">None</MudSelectItem>
                        @foreach (var requirement in _requirements)
                        {
                            <MudSelectItem T="Guid?" Value="@((Guid?)requirement.Id)">@(requirement.Title ?? $"Requirement ID: {requirement.Id}")</MudSelectItem>
                        }
                    </MudSelect>
                </MudForm>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@CancelCreate" Variant="Variant.Text" Color="Color.Secondary" Size="Size.Medium">Cancel</MudButton>
        <MudButton OnClick="@CreateTestSuiteAsync" Variant="Variant.Filled" Color="Color.Primary" Disabled="!_formIsValid" Size="Size.Medium">Create</MudButton>
    </DialogActions>
</MudDialog>

<!-- Edit Test Suite Dialog -->
<MudDialog @bind-Visible="_showEditDialog" Options="new DialogOptions { MaxWidth = MaxWidth.Large, FullWidth = true, CloseButton = true }" Style="min-height: 80vh; max-height: 90vh;">
    <DialogContent>
        <MudGrid Class="pa-6">
            <MudItem xs="12">
                <MudText Typo="Typo.h6" Color="Color.Primary" Class="mb-4">Edit Test Suite</MudText>
                <MudForm @ref="_editForm" @bind-IsValid="_editFormIsValid" Class="d-flex flex-column gap-6">
                    <MudTextField T="string"
                                  Label="Test Suite Name"
                                  @bind-Value="_editTestSuite.Name"
                                  Required="true"
                                  RequiredError="Name is required"
                                  Validation="@(new Func<string, string>(ValidateName))"
                                  Variant="Variant.Outlined"
                                  Clearable="true"
                                  AutoFocus="true"
                                  Margin="Margin.Normal"
                                  HelperText="Enter a unique test suite name (min 3 characters)"
                                  Class="mud-input-rounded" />
                    <MudText Typo="Typo.subtitle1">Description</MudText>
                    <BlazorRichTextEditor @bind-Value="_editTestSuite.Description" EntityId="@_editTestSuite.Id.ToString()" ProjectId="@_editTestSuite.ProjectId.ToString()" EntityType="TestSuites" FieldName="Description" />
                    <MudSelect T="Guid?"
                               Label="Requirement"
                               @bind-Value="_editTestSuite.RequirementId"
                               Variant="Variant.Outlined"
                               Class="mud-input-rounded"
                               AnchorOrigin="Origin.BottomCenter"
                               TransformOrigin="Origin.TopCenter"
                               ToStringFunc="@(id => id.HasValue ? _requirements.FirstOrDefault(r => r.Id == id)?.Title ?? "None" : "None")">
                        <MudSelectItem T="Guid?" Value="@((Guid?)null)">None</MudSelectItem>
                        @foreach (var requirement in _requirements)
                        {
                            <MudSelectItem T="Guid?" Value="@((Guid?)requirement.Id)">@(requirement.Title ?? $"Requirement ID: {requirement.Id}")</MudSelectItem>
                        }
                    </MudSelect>
                </MudForm>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@CancelEdit" Variant="Variant.Text" Color="Color.Secondary" Size="Size.Medium">Cancel</MudButton>
        <MudButton OnClick="@SaveEditAsync" Variant="Variant.Filled" Color="Color.Primary" Disabled="!_editFormIsValid" Size="Size.Medium">Save</MudButton>
    </DialogActions>
</MudDialog>

<!-- Link Test Suite to Requirement Dialog -->
<MudDialog @bind-Visible="_showLinkRequirementDialog" Options="new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true }">
    <DialogContent>
        <MudGrid Class="pa-6">
            <MudItem xs="12">
                <MudText Typo="Typo.h6" Color="Color.Primary" Class="mb-4">Link Test Suite to Requirement</MudText>
                <MudForm @ref="_linkForm" @bind-IsValid="_linkFormIsValid" Class="d-flex flex-column gap-6">
                    <MudSelect T="Guid?"
                               Label="Requirement"
                               @bind-Value="_editTestSuite.RequirementId"
                               Variant="Variant.Outlined"
                               Class="mud-input-rounded"
                               AnchorOrigin="Origin.BottomCenter"
                               TransformOrigin="Origin.TopCenter"
                               ToStringFunc="@(id => id.HasValue ? _requirements.FirstOrDefault(r => r.Id == id)?.Title ?? "None" : "None")">
                        <MudSelectItem T="Guid?" Value="@((Guid?)null)">None</MudSelectItem>
                        @foreach (var requirement in _requirements)
                        {
                            <MudSelectItem T="Guid?" Value="@((Guid?)requirement.Id)">@(requirement.Title ?? $"Requirement ID: {requirement.Id}")</MudSelectItem>
                        }
                    </MudSelect>
                </MudForm>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@CancelLinkRequirement" Variant="Variant.Text" Color="Color.Secondary" Size="Size.Medium">Cancel</MudButton>
        <MudButton OnClick="@LinkTestSuiteToRequirementAsync" Variant="Variant.Filled" Color="Color.Primary" Disabled="!_linkFormIsValid" Size="Size.Medium">Link</MudButton>
    </DialogActions>
</MudDialog>

@code {
    #region Fields
    private CreateTestSuiteDto _newTestSuite = new() { Id = Guid.NewGuid() };
    private TestSuiteDto _editTestSuite = new();
    private LinkTestSuiteDto _linkTestSuiteDto = new();
    private List<ProjectDto> _projects = new();
    private List<RequirementDto> _requirements = new();
    private List<TestSuiteDto> _parentTestSuites = new();
    private bool _showCreateDialog;
    private bool _showEditDialog;
    private bool _showLinkRequirementDialog;
    private string _searchTerm = string.Empty;
    private bool _isLoading;
    private MudTable<TestSuiteDto> _table;
    private HashSet<TestSuiteDto> _selectedTestSuites = new();
    private MudForm _form;
    private MudForm _editForm;
    private MudForm _linkForm;
    private bool _formIsValid;
    private bool _editFormIsValid;
    private bool _linkFormIsValid;
    private int _pageSize = 10;
    private Dictionary<Guid, TestSuiteDto> _originalTestSuites = new();
    private HashSet<Guid> _expandedTestSuites = new();
    private Guid _currentTestSuiteId;
    private Guid _currentProjectId;
    private readonly string _tenantId = "default"; // Replace with dynamic tenant ID logic

    private readonly MudTheme _customTheme = new()
    {
        PaletteLight = new PaletteLight
        {
            Primary = "#1976D2",
            Secondary = "#FF4081",
            Background = "#F5F7FA",
            Surface = "#FFFFFF",
            TextPrimary = "#212121",
            TextSecondary = "#757575",
            AppbarBackground = "#1976D2",
            ActionDefault = "#212121"
        },
        PaletteDark = new PaletteDark
        {
            Primary = "#2196F3",
            Secondary = "#F50057",
            Background = "#121212",
            Surface = "#1E1E1E",
            TextPrimary = "#FFFFFF",
            TextSecondary = "#B0BEC5",
            AppbarBackground = "#2196F3",
            ActionDefault = "#FFFFFF"
        },
        Typography = new Typography
        {
            // Default = new Default
            // {
            //     FontFamily = new[] { "Roboto", "Helvetica", "Arial", "sans-serif" },
            //     FontSize = ".875rem",
            //     FontWeight = 400,
            //     LineHeight = 1.43,
            //     LetterSpacing = ".01071em"
            // },
            // H6 = new H6
            // {
            //     FontSize = "1.25rem",
            //     FontWeight = 500,
            //     LineHeight = 1.6,
            //     LetterSpacing = ".0075em"
            // }
        },
        LayoutProperties = new LayoutProperties
        {
            DefaultBorderRadius = "8px"
        }
    };
    #endregion

    #region Lifecycle
    protected override async Task OnInitializedAsync()
    {
        _projects = await ProjectService.GetProjectsAsync();
        _requirements = await RequirementService.GetRequirementsAsync();
        var allTestSuites = await TestSuiteService.GetTestSuitesAsync();
        _parentTestSuites = FlattenTestSuites(allTestSuites).ToList();
        await _table?.ReloadServerData();
    }
    #endregion

    #region Table Operations
    private async Task<TableData<TestSuiteDto>> LoadTestSuitesAsync(TableState state, CancellationToken cancellationToken)
    {
        _isLoading = true;
        try
        {
            string filter = string.Empty;
            if (!string.IsNullOrEmpty(_searchTerm))
                filter += $"name:{_searchTerm}";
            if (!string.IsNullOrEmpty(state.SortLabel))
                filter += $"{(string.IsNullOrEmpty(filter) ? "" : ",")}sort:{state.SortLabel}:{(state.SortDirection == SortDirection.Ascending ? "asc" : "desc")}";

            var query = new TestSuiteQuery
            {
                SearchTerm = _searchTerm,
                SortBy = state.SortLabel,
                SortDirection = state.SortDirection == SortDirection.Ascending ? "asc" : "desc",
                Page = state.Page + 1,
                PageSize = _pageSize
            };

            var result = await TestSuiteService.GetPagedTestSuitesAsync(query);
            return new TableData<TestSuiteDto>
            {
                TotalItems = result.TotalCount,
                Items = result.Items
            };
        }
        catch (HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            Snackbar.Add("Unauthorized: Please check your permissions or login again.", Severity.Error);
            NavigationManager.NavigateTo("/login");
            return new TableData<TestSuiteDto> { TotalItems = 0, Items = new List<TestSuiteDto>() };
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to load test suites: {ex.Message}", Severity.Error);
            Console.WriteLine($"Error loading test suites: {ex}");
            return new TableData<TestSuiteDto> { TotalItems = 0, Items = new List<TestSuiteDto>() };
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task OnPageSizeChanged(int newSize)
    {
        _pageSize = newSize;
        Snackbar.Add($"Page size changed to {_pageSize}", Severity.Info);
        await _table.ReloadServerData();
    }

    private async Task HandleSearchTestSuites(string term)
    {
        _searchTerm = term;
        await _table.ReloadServerData();
    }

    private async Task RefreshTestSuitesAsync()
    {
        await _table.ReloadServerData();
        var allTestSuites = await TestSuiteService.GetTestSuitesAsync();
        _parentTestSuites = FlattenTestSuites(allTestSuites).ToList();
        _requirements = await RequirementService.GetRequirementsAsync();
        Snackbar.Add("Test suites refreshed successfully", Severity.Success);
    }

    private void StartInlineEdit(TestSuiteDto testSuite)
    {
        testSuite.IsEditing = true;
        _originalTestSuites[testSuite.Id] = new TestSuiteDto
        {
            Id = testSuite.Id,
            Name = testSuite.Name,
            Description = testSuite.Description,
            ProjectId = testSuite.ProjectId,
            TenantId = testSuite.TenantId,
            ParentSuiteId = testSuite.ParentSuiteId,
            RequirementId = testSuite.RequirementId,
            Children = testSuite.Children
        };
    }

    private async Task SaveInlineEditAsync(TestSuiteDto testSuite)
    {
        var nameValidationResult = ValidateName(testSuite.Name);
        if (nameValidationResult != null)
        {
            Snackbar.Add(nameValidationResult, Severity.Error);
            return;
        }

        try
        {
            await TestSuiteService.UpdateTestSuiteAsync(testSuite);
            testSuite.IsEditing = false;
            _originalTestSuites.Remove(testSuite.Id);
            Snackbar.Add("Test suite updated successfully", Severity.Success);
        }
        catch (HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            Snackbar.Add("Unauthorized: Please check your permissions or login again.", Severity.Error);
            NavigationManager.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to update test suite: {ex.Message}", Severity.Error);
            Console.WriteLine($"Error updating test suite: {ex}");
        }
    }

    private void CancelInlineEdit(TestSuiteDto testSuite)
    {
        if (_originalTestSuites.TryGetValue(testSuite.Id, out var original))
        {
            testSuite.Name = original.Name;
            testSuite.Description = original.Description;
            testSuite.ProjectId = original.ProjectId;
            testSuite.TenantId = original.TenantId;
            testSuite.ParentSuiteId = original.ParentSuiteId;
            testSuite.RequirementId = original.RequirementId;
            testSuite.Children = original.Children;
            testSuite.IsEditing = false;
            _originalTestSuites.Remove(testSuite.Id);
        }
    }

    private async Task DeleteTestSuiteAsync(Guid id, Guid projectId)
    {
        var parameters = new DialogParameters { { "ContentText", "Are you sure you want to delete this test suite and its children?" } };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                await TestSuiteService.DeleteTestSuiteAsync(id, projectId);
                await _table.ReloadServerData();
                Snackbar.Add("Test suite deleted successfully", Severity.Success);
            }
            catch (HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                Snackbar.Add("Unauthorized: Please check your permissions or login again.", Severity.Error);
                NavigationManager.NavigateTo("/login");
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Failed to delete test suite: {ex.Message}", Severity.Error);
                Console.WriteLine($"Error deleting test suite: {ex}");
            }
        }
    }

    private async Task BulkDeleteTestSuitesAsync()
    {
        var parameters = new DialogParameters { { "ContentText", $"Are you sure you want to delete {_selectedTestSuites.Count} test suites and their children?" } };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Confirm Bulk Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                foreach (var testSuite in _selectedTestSuites.ToList())
                {
                    await TestSuiteService.DeleteTestSuiteAsync(testSuite.Id, testSuite.ProjectId);
                }
                await _table.ReloadServerData();
                _selectedTestSuites.Clear();
                Snackbar.Add("Selected test suites deleted successfully", Severity.Success);
            }
            catch (HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                Snackbar.Add("Unauthorized: Please check your permissions or login again.", Severity.Error);
                NavigationManager.NavigateTo("/login");
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Failed to delete test suites: {ex.Message}", Severity.Error);
                Console.WriteLine($"Error deleting test suites: {ex}");
            }
        }
    }
    #endregion

    #region Dialog Operations
    private async Task OpenCreateDialogAsync()
    {
        _newTestSuite = new CreateTestSuiteDto { Id = Guid.NewGuid() };
        _projects = await ProjectService.GetProjectsAsync();
        _requirements = await RequirementService.GetRequirementsAsync();
        _parentTestSuites = FlattenTestSuites(await TestSuiteService.GetTestSuitesAsync()).ToList();
        _newTestSuite.TenantId = _tenantId;
        _newTestSuite.ProjectId = ApplicationContextService.SelectedProjectId ?? Guid.Empty;
        _newTestSuite.RequirementId = _requirements.FirstOrDefault()?.Id;
        _showCreateDialog = true;
        await Task.Run(() => _form?.ResetValidation());
    }

    private async Task OpenCreateDialogEditAsync(Guid parentSuiteId)
    {
        _newTestSuite = new CreateTestSuiteDto { Id = Guid.NewGuid() };
        _projects = await ProjectService.GetProjectsAsync();
        _requirements = await RequirementService.GetRequirementsAsync();
        _parentTestSuites = FlattenTestSuites(await TestSuiteService.GetTestSuitesAsync()).ToList();
        _newTestSuite.ParentSuiteId = parentSuiteId;
        _newTestSuite.TenantId = _tenantId;
        _newTestSuite.ProjectId = ApplicationContextService.SelectedProjectId ?? Guid.Empty;
        _newTestSuite.RequirementId = _requirements.FirstOrDefault()?.Id;
        _showCreateDialog = true;
        await Task.Run(() => _form?.ResetValidation());
    }

    private async Task OpenEditDialogAsync(TestSuiteDto testSuite)
    {
        _editTestSuite = new TestSuiteDto
        {
            Id = testSuite.Id,
            Name = testSuite.Name,
            Description = testSuite.Description,
            ProjectId = testSuite.ProjectId,
            TenantId = testSuite.TenantId,
            ParentSuiteId = testSuite.ParentSuiteId,
            RequirementId = testSuite.RequirementId,
            Children = testSuite.Children
        };
        _projects = await ProjectService.GetProjectsAsync();
        _requirements = await RequirementService.GetRequirementsAsync();
        _parentTestSuites = FlattenTestSuites(await TestSuiteService.GetTestSuitesAsync()).ToList();
        _showEditDialog = true;
        await Task.Run(() => _editForm?.ResetValidation());
    }

    private async Task OpenLinkRequirementDialogAsync(TestSuiteDto testSuite)
    {
        _linkTestSuiteDto = new LinkTestSuiteDto
        {
            TestSuiteId = testSuite.Id
        };
        _currentTestSuiteId = testSuite.Id;
        _currentProjectId = testSuite.ProjectId;
        _editTestSuite.RequirementId = testSuite.RequirementId;
        _requirements = await RequirementService.GetRequirementsAsync();
        _showLinkRequirementDialog = true;
        await Task.Run(() => _linkForm?.ResetValidation());
    }

    private void CancelCreate()
    {
        _showCreateDialog = false;
        _newTestSuite = new CreateTestSuiteDto { Id = Guid.NewGuid() };
        _form?.ResetValidation();
    }

    private void CancelEdit()
    {
        _showEditDialog = false;
        _editTestSuite = new TestSuiteDto();
        _editForm?.ResetValidation();
    }

    private void CancelLinkRequirement()
    {
        _showLinkRequirementDialog = false;
        _linkTestSuiteDto = new LinkTestSuiteDto();
        _linkForm?.ResetValidation();
    }

    private async Task CreateTestSuiteAsync()
    {
        if (!_formIsValid)
        {
            Snackbar.Add("Please fill in all required fields", Severity.Error);
            return;
        }

        try
        {
            _newTestSuite.TenantId = _tenantId;
            _newTestSuite.ProjectId = ApplicationContextService.SelectedProjectId ?? Guid.Empty;
            var createdTestSuiteId = await TestSuiteService.CreateTestSuiteWithIdAsync(_newTestSuite);
            if (_newTestSuite.RequirementId.HasValue)
            {
                await TestSuiteService.LinkTestSuiteToRequirementAsync(
                    _newTestSuite.ProjectId,
                    _newTestSuite.RequirementId.Value,
                    new LinkTestSuiteDto { TestSuiteId = createdTestSuiteId },
                    CancellationToken.None);
            }
            await _table.ReloadServerData();
            _parentTestSuites = FlattenTestSuites(await TestSuiteService.GetTestSuitesAsync()).ToList();
            _requirements = await RequirementService.GetRequirementsAsync();
            _showCreateDialog = false;
            _newTestSuite = new CreateTestSuiteDto { Id = Guid.NewGuid() };
            _form?.ResetValidation();
            Snackbar.Add("Test suite created successfully", Severity.Success);
        }
        catch (HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            Snackbar.Add("Unauthorized: Please check your permissions or login again.", Severity.Error);
            NavigationManager.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to create test suite: {ex.Message}", Severity.Error);
            Console.WriteLine($"Error creating test suite: {ex}");
        }
    }

    private async Task SaveEditAsync()
    {
        if (!_editFormIsValid)
        {
            Snackbar.Add("Please fill in all required fields", Severity.Error);
            return;
        }

        try
        {
            await TestSuiteService.UpdateTestSuiteAsync(_editTestSuite);
            if (_editTestSuite.RequirementId.HasValue)
            {
                await TestSuiteService.LinkTestSuiteToRequirementAsync(
                    _editTestSuite.ProjectId,
                    _editTestSuite.RequirementId.Value,
                    new LinkTestSuiteDto { TestSuiteId = _editTestSuite.Id },
                    CancellationToken.None);
            }
            else if (_originalTestSuites.ContainsKey(_editTestSuite.Id) && _originalTestSuites[_editTestSuite.Id].RequirementId.HasValue)
            {
                await TestSuiteService.UnlinkTestSuiteFromRequirementAsync(
                    _editTestSuite.ProjectId,
                    _originalTestSuites[_editTestSuite.Id].RequirementId.Value,
                    _editTestSuite.Id,
                    CancellationToken.None);
            }
            await _table.ReloadServerData();
            _parentTestSuites = FlattenTestSuites(await TestSuiteService.GetTestSuitesAsync()).ToList();
            _requirements = await RequirementService.GetRequirementsAsync();
            _showEditDialog = false;
            _editTestSuite = new TestSuiteDto();
            _editForm?.ResetValidation();
            Snackbar.Add("Test suite updated successfully", Severity.Success);
        }
        catch (HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            Snackbar.Add("Unauthorized: Please check your permissions or login again.", Severity.Error);
            NavigationManager.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to update test suite: {ex.Message}", Severity.Error);
            Console.WriteLine($"Error updating test suite: {ex}");
        }
    }

    private async Task LinkTestSuiteToRequirementAsync()
    {
        if (!_linkFormIsValid)
        {
            Snackbar.Add("Please select a requirement", Severity.Error);
            return;
        }

        try
        {
            await TestSuiteService.LinkTestSuiteToRequirementAsync(
                _currentProjectId,
                _editTestSuite.RequirementId!.Value,
                _linkTestSuiteDto,
                CancellationToken.None);
            await _table.ReloadServerData();
            _requirements = await RequirementService.GetRequirementsAsync();
            _showLinkRequirementDialog = false;
            _linkTestSuiteDto = new LinkTestSuiteDto();
            _linkForm?.ResetValidation();
            Snackbar.Add("Test suite linked to requirement successfully", Severity.Success);
        }
        catch (HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            Snackbar.Add("Unauthorized: Please check your permissions or login again.", Severity.Error);
            NavigationManager.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to link test suite to requirement: {ex.Message}", Severity.Error);
            Console.WriteLine($"Error linking test suite to requirement: {ex}");
        }
    }

    private async Task UnlinkTestSuiteFromRequirementAsync(Guid testSuiteId, Guid projectId, Guid? requirementId)
    {
        if (!requirementId.HasValue)
        {
            Snackbar.Add("No requirement is linked to this test suite.", Severity.Warning);
            return;
        }

        var parameters = new DialogParameters { { "ContentText", "Are you sure you want to unlink this test suite from its requirement?" } };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Small, FullWidth = true };
        var dialog = await DialogService.ShowAsync<ConfirmationDialog>("Confirm Unlink", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            try
            {
                await TestSuiteService.UnlinkTestSuiteFromRequirementAsync(projectId, requirementId.Value, testSuiteId);
                await _table.ReloadServerData();
                _requirements = await RequirementService.GetRequirementsAsync();
                Snackbar.Add("Test suite unlinked from requirement successfully", Severity.Success);
            }
            catch (HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.Unauthorized)
            {
                Snackbar.Add("Unauthorized: Please check your permissions or login again.", Severity.Error);
                NavigationManager.NavigateTo("/login");
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Failed to unlink test suite from requirement: {ex.Message}", Severity.Error);
                Console.WriteLine($"Error unlinking test suite from requirement: {ex}");
            }
        }
    }
    #endregion

    #region Export/Import
    private async Task ExportToCsvAsync()
    {
        try
        {
            var query = new TestSuiteQuery { Page = 1, PageSize = 1000, SearchTerm = _searchTerm };
            var result = await TestSuiteService.GetPagedTestSuitesAsync(query);
            var testSuites = FlattenTestSuites(result.Items);

            if (!testSuites.Any())
            {
                Snackbar.Add("No test suites found to export.", Severity.Warning);
                return;
            }

            using var memoryStream = new MemoryStream();
            using var writer = new StreamWriter(memoryStream);
            using var csv = new CsvWriter(writer, CultureInfo.InvariantCulture);
            csv.WriteRecords(testSuites.Select(ts => new
            {
                ts.Id,
                ts.Name,
                ts.Description,
                Project = _projects.FirstOrDefault(p => p.Id == ts.ProjectId)?.Name ?? "None",
                ParentSuite = _parentTestSuites.FirstOrDefault(p => p.Id == ts.ParentSuiteId)?.Name ?? "None",
                Requirement = ts.RequirementId.HasValue ? _requirements.FirstOrDefault(r => r.Id == ts.RequirementId)?.Title ?? "None" : "None",
                ts.TenantId,
                ts.CreatedAt,
                ts.ModifiedAt
            }));
            await writer.FlushAsync();
            memoryStream.Position = 0;

            var csvBytes = memoryStream.ToArray();
            var base64Data = Convert.ToBase64String(csvBytes);
            await JSRuntime.InvokeVoidAsync("downloadFileFromBase64",
                "TestSuitesExport.csv",
                "text/csv",
                base64Data);

            Snackbar.Add("Test suites exported to CSV successfully", Severity.Success);
        }
        catch (HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            Snackbar.Add("Unauthorized: Please check your permissions or login again.", Severity.Error);
            NavigationManager.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to export test suites: {ex.Message}", Severity.Error);
            Console.WriteLine($"Error exporting to CSV: {ex}");
        }
    }

    private async Task ExportToExcelAsync()
    {
        try
        {
            var query = new TestSuiteQuery { Page = 1, PageSize = 1000, SearchTerm = _searchTerm };
            var result = await TestSuiteService.GetPagedTestSuitesAsync(query);
            var testSuites = FlattenTestSuites(result.Items);

            if (!testSuites.Any())
            {
                Snackbar.Add("No test suites found to export.", Severity.Warning);
                return;
            }

            using var workbook = new XLWorkbook();
            var worksheet = workbook.Worksheets.Add("TestSuites");

            worksheet.Cell("A1").Value = "ID";
            worksheet.Cell("B1").Value = "Name";
            worksheet.Cell("C1").Value = "Description";
            worksheet.Cell("D1").Value = "Project";
            worksheet.Cell("E1").Value = "Parent Suite";
            worksheet.Cell("F1").Value = "Requirement";
            worksheet.Cell("G1").Value = "Tenant ID";
            worksheet.Cell("H1").Value = "Created At";
            worksheet.Cell("I1").Value = "Updated At";

            var row = 2;
            foreach (var ts in testSuites)
            {
                worksheet.Cell($"A{row}").Value = ts.Id.ToString();
                worksheet.Cell($"B{row}").Value = ts.Name;
                worksheet.Cell($"C{row}").Value = ts.Description;
                worksheet.Cell($"D{row}").Value = _projects.FirstOrDefault(p => p.Id == ts.ProjectId)?.Name ?? "None";
                worksheet.Cell($"E{row}").Value = _parentTestSuites.FirstOrDefault(p => p.Id == ts.ParentSuiteId)?.Name ?? "None";
                worksheet.Cell($"F{row}").Value = ts.RequirementId.HasValue ? _requirements.FirstOrDefault(r => r.Id == ts.RequirementId)?.Title ?? "None" : "None";
                worksheet.Cell($"G{row}").Value = ts.TenantId;
                worksheet.Cell($"H{row}").Value = ts.CreatedAt.ToString("yyyy-MM-dd");
                worksheet.Cell($"I{row}").Value = ts.ModifiedAt?.ToString("yyyy-MM-dd");
                row++;
            }

            using var stream = new MemoryStream();
            workbook.SaveAs(stream);
            stream.Position = 0;

            var bytes = stream.ToArray();
            var base64Data = Convert.ToBase64String(bytes);
            await JSRuntime.InvokeVoidAsync("downloadFileFromBase64",
                "TestSuitesExport.xlsx",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                base64Data);

            Snackbar.Add("Test suites exported to Excel successfully", Severity.Success);
        }
        catch (HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            Snackbar.Add("Unauthorized: Please check your permissions or login again.", Severity.Error);
            NavigationManager.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to export test suites: {ex.Message}", Severity.Error);
            Console.WriteLine($"Error exporting to Excel: {ex}");
        }
    }

    private async Task ExportToPdfAsync()
    {
        try
        {
            var query = new TestSuiteQuery { Page = 1, PageSize = 1000, SearchTerm = _searchTerm };
            var result = await TestSuiteService.GetPagedTestSuitesAsync(query);
            var testSuites = FlattenTestSuites(result.Items);

            if (!testSuites.Any())
            {
                Snackbar.Add("No test suites found to export.", Severity.Warning);
                return;
            }

            var pdfRequest = new PdfGenerationDto
            {
                Title = "Test Suites Report",
                FileName = "TestSuites_Report.pdf",
                FontSizeTitle = 16,
                FontSizeHeader = 12,
                FontSizeBody = 10,
                Columns = new List<PdfColumnDto>
                {
                    new PdfColumnDto { Field = "id", Header = "ID" },
                    new PdfColumnDto { Field = "name", Header = "Name" },
                    new PdfColumnDto { Field = "description", Header = "Description" },
                    new PdfColumnDto { Field = "project", Header = "Project" },
                    new PdfColumnDto { Field = "parentSuite", Header = "Parent Suite" },
                    new PdfColumnDto { Field = "requirement", Header = "Requirement" },
                },
                Data = testSuites.Select(ts => new Dictionary<string, string>
                {
                    { "id", ts.Id.ToString() },
                    { "name", ts.Name ?? "" },
                    { "description", ts.Description ?? "" },
                    { "project", _projects.FirstOrDefault(p => p.Id == ts.ProjectId)?.Name ?? "None" },
                    { "parentSuite", _parentTestSuites.FirstOrDefault(p => p.Id == ts.ParentSuiteId)?.Name ?? "None" },
                    { "requirement", ts.RequirementId.HasValue ? _requirements.FirstOrDefault(r => r.Id == ts.RequirementId)?.Title ?? "None" : "None" }
                }).ToList()
            };

            var pdfBytes = await CommonService.GeneratePdfAsync(pdfRequest);
            var base64Data = Convert.ToBase64String(pdfBytes);
            await JSRuntime.InvokeVoidAsync("downloadFileFromBase64",
                "TestSuites_Report.pdf",
                "application/pdf",
                base64Data);

            Snackbar.Add("Test suites exported to PDF successfully", Severity.Success);
        }
        catch (HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            Snackbar.Add("Unauthorized: Please check your permissions or login again.", Severity.Error);
            NavigationManager.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to export test suites: {ex.Message}", Severity.Error);
            Console.WriteLine($"Error exporting to PDF: {ex}");
        }
    }

    private async Task ImportFromFileAsync()
    {
        var parameters = new DialogParameters
        {
            { "OnFileUploaded", new EventCallback<string>(this, ImportCsvContentAsync) }
        };
        var options = new DialogOptions
        {
            CloseButton = true,
            MaxWidth = MaxWidth.Medium,
            FullWidth = true
        };
        await DialogService.ShowAsync<FileUploadDialog>("Import Test Suites from CSV", parameters, options);
    }

    private async Task ImportCsvContentAsync(string csvContent)
    {
        try
        {
            using var reader = new StringReader(csvContent);
            using var csv = new CsvReader(reader, CultureInfo.InvariantCulture);
            var records = csv.GetRecords<CreateTestSuiteDto>().ToList();
            foreach (var testSuite in records)
            {
                if (!string.IsNullOrWhiteSpace(testSuite?.Name))
                {
                    testSuite.TenantId = _tenantId;
                    testSuite.Id = Guid.NewGuid();
                    await TestSuiteService.CreateTestSuiteAsync(testSuite);
                }
            }
            await _table.ReloadServerData();
            _parentTestSuites = FlattenTestSuites(await TestSuiteService.GetTestSuitesAsync()).ToList();
            _requirements = await RequirementService.GetRequirementsAsync();
            Snackbar.Add("Test suites imported successfully", Severity.Success);
        }
        catch (HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            Snackbar.Add("Unauthorized: Please check your permissions or login again.", Severity.Error);
            NavigationManager.NavigateTo("/login");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to import test suites: {ex.Message}", Severity.Error);
            Console.WriteLine($"Error importing CSV: {ex}");
        }
    }
    #endregion

    #region Hierarchy Helpers
    private void ToggleExpand(Guid testSuiteId)
    {
        if (_expandedTestSuites.Contains(testSuiteId))
            _expandedTestSuites.Remove(testSuiteId);
        else
            _expandedTestSuites.Add(testSuiteId);
        StateHasChanged();
    }

    private int GetDepth(TestSuiteDto testSuite)
    {
        int depth = 1;
        var current = testSuite;
        while (current.ParentSuiteId.HasValue)
        {
            current = _parentTestSuites.FirstOrDefault(p => p.Id == current.ParentSuiteId.Value);
            if (current == null) break;
            depth++;
        }
        return depth;
    }

    private RenderFragment RenderChildRows(TestSuiteDto testSuite, int depth)
    {
        return @<text>
            @foreach (var child in testSuite.Children)
            {
                <tr class="child-row" style="padding-left: @(20 * depth)px;">
                    <td style="vertical-align: middle;">
                        @if (child.Children.Any())
                        {
                            <div style="display: flex; align-items: center;">
                                <MudIconButton Icon="@(_expandedTestSuites.Contains(child.Id) ? Icons.Material.Filled.ExpandLess : Icons.Material.Filled.ExpandMore)"
                                               Size="Size.Small"
                                               OnClick="@(() => ToggleExpand(child.Id))" />
                            </div>
                        }
                    </td>
                    <td style="vertical-align: middle;">
                        @if (child.IsEditing)
                        {
                            <MudTextField T="string"
                                          @bind-Value="child.Name"
                                          Required="true"
                                          RequiredError="Name is required"
                                          Variant="Variant.Outlined"
                                          Margin="Margin.Dense"
                                          Class="mud-input-compact" />
                        }
                        else
                        {
                            @child.Name
                        }
                    </td>
                    <td style="vertical-align: middle;">
                        @if (child.IsEditing)
                        {
                            <MudTextField T="string"
                                          @bind-Value="child.Description"
                                          Variant="Variant.Outlined"
                                          Margin="Margin.Dense"
                                          Lines="2"
                                          Class="mud-input-compact" />
                        }
                        else
                        {
                            <div>@((MarkupString)child.Description)</div>
                        }
                    </td>
                    <td style="vertical-align: middle;">
                        @(_projects.FirstOrDefault(p => p.Id == child.ProjectId)?.Name ?? "None")
                    </td>
                    <td style="vertical-align: middle;">
                        @(_parentTestSuites.FirstOrDefault(p => p.Id == child.ParentSuiteId)?.Name ?? "None")
                    </td>
                    <td style="vertical-align: middle;">
                        @(child.RequirementId.HasValue ? _requirements.FirstOrDefault(r => r.Id == child.RequirementId)?.Title ?? "None" : "None")
                    </td>
                    <td style="display: flex; justify-content: center; gap: 8px; vertical-align: middle;">
                        @if (child.IsEditing)
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.Save"
                                           Color="Color.Success"
                                           Size="Size.Small"
                                           OnClick="@(() => SaveInlineEditAsync(child))" />
                            <MudIconButton Icon="@Icons.Material.Filled.Cancel"
                                           Color="Color.Secondary"
                                           Size="Size.Small"
                                           OnClick="@(() => CancelInlineEdit(child))" />
                        }
                        else
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.Add"
                                           Color="Color.Success"
                                           Size="Size.Small"
                                           OnClick="@(() => OpenCreateDialogEditAsync(child.Id))" />
                            <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                           Color="Color.Primary"
                                           Size="Size.Small"
                                           OnClick="@(() => StartInlineEdit(child))" />
                            <MudIconButton Icon="@Icons.Material.Filled.Link"
                                           Color="Color.Info"
                                           Size="Size.Small"
                                           OnClick="@(() => OpenLinkRequirementDialogAsync(child))"
                                           Disabled="@(child.RequirementId.HasValue)" />
                            <MudIconButton Icon="@Icons.Material.Filled.LinkOff"
                                           Color="Color.Warning"
                                           Size="Size.Small"
                                           OnClick="@(() => UnlinkTestSuiteFromRequirementAsync(child.Id, child.ProjectId, child.RequirementId))"
                                           Disabled="@(!child.RequirementId.HasValue)" />
                            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                           Color="Color.Error"
                                           Size="Size.Small"
                                           OnClick="@(() => DeleteTestSuiteAsync(child.Id, child.ProjectId))" />
                        }
                    </td>
                </tr>
                @if (_expandedTestSuites.Contains(child.Id))
                {
                    @RenderChildRows(child, depth + 1)
                }
            }
        </text>;
    }

    private List<TestSuiteDto> FlattenTestSuites(IEnumerable<TestSuiteDto> testSuites)
    {
        var result = new List<TestSuiteDto>();
        foreach (var testSuite in testSuites)
        {
            result.Add(testSuite);
            if (testSuite.Children.Any())
                result.AddRange(FlattenTestSuites(testSuite.Children));
        }
        return result;
    }
    #endregion

    #region Validation
    private string ValidateName(string name)
    {
        if (string.IsNullOrWhiteSpace(name))
            return "Name is required";
        if (name.Length < 3)
            return "Name must be at least 3 characters long";
        return null;
    }
    #endregion

    #region Helpers
    private void LogHover(string action)
    {
        Console.WriteLine($"Hovered: {action}");
        Snackbar.Add($"Hovered: {action}", Severity.Info);
    }
    #endregion
}