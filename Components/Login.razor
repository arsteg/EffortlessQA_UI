@page "/login"

@using EffortlessQA.UI.Services
@using EffortlessQA.Data.Dtos
@using MudBlazor
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<MudGrid Class="d-flex justify-center align-center" Style="min-height: 80vh;">
    <MudItem xs="12" sm="6" md="4">
        <MudCard Elevation="4" Class="pa-6">
            <MudCardContent>
                <MudText Typo="Typo.h5" GutterBottom="true" Align="Align.Center">Login</MudText>
                <MudForm @ref="_form" @bind-IsValid="@_formIsValid">
                    <MudTextField T="string"
                                  Label="Email"
                                  @bind-Value="_loginDto.Email"
                                  Required="true"
                                  RequiredError="Email is required"
                                  Validation="@(new Func<string, string>(ValidateEmail))" />
                    <MudTextField T="string"
                                  Label="Password"
                                  @bind-Value="_loginDto.Password"
                                  InputType="InputType.Password"
                                  Required="true"
                                  RequiredError="Password is required"
                                  Class="mt-4"
                                  Validation="@(new Func<string, string>(ValidatePassword))" />
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               Class="mt-4"
                               OnClick="@LoginAsync"
                               Disabled="!_formIsValid || _isLoading"
                               FullWidth="true">
                        @if (_isLoading)
                        {
                            <MudProgressCircular Class="mr-2" Size="Size.Small" Indeterminate="true" />
                            <span>Logging in...</span>
                        }
                        else
                        {
                            <span>Login</span>
                        }
                    </MudButton>
                    <MudButton Variant="Variant.Text"
                               Class="mt-2"
                               OnClick="@(() => Navigation.NavigateTo("/register"))"
                               FullWidth="true">Register</MudButton>
                    <MudButton Variant="Variant.Text"
                               Class="mt-2"
                               OnClick="@(() => Navigation.NavigateTo("/forgot-password"))"
                               FullWidth="true">Forgot Password?</MudButton>
                </MudForm>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

@code {
    private LoginDto _loginDto = new();
    private MudForm _form;
    private bool _formIsValid;
    private bool _isLoading;

    protected override async Task OnInitializedAsync()
    {
        if (AuthService.IsAuthenticated)
        {
            Navigation.NavigateTo("/dashboard");
        }
    }

    private async Task LoginAsync()
    {
        if (!_formIsValid) return;

        try
        {
            _isLoading = true; // Start loading
            await AuthService.LoginAsync(_loginDto);
            Navigation.NavigateTo("/dashboard");
            Snackbar.Add("Login successful", Severity.Success);

        }
        catch (HttpRequestException ex) when (ex.StatusCode == System.Net.HttpStatusCode.Unauthorized)
        {
            Snackbar.Add("Invalid email or password.", Severity.Error);
            _loginDto = new(); // Reset form
            await _form.ResetAsync(); // Reset MudForm validation
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Login failed: {ex.Message}", Severity.Error);
            _loginDto = new(); // Reset form
            await _form.ResetAsync(); // Reset MudForm validation
        }
        finally
        {
            _isLoading = false; // Stop loading
        }
    }

    private string ValidateEmail(string email)
    {
        if (string.IsNullOrWhiteSpace(email))
            return "Email is required";
        if (!System.Text.RegularExpressions.Regex.IsMatch(email, @"^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$"))
            return "Invalid email format";
        return null;
    }

    private string ValidatePassword(string password)
    {
        if (string.IsNullOrWhiteSpace(password))
            return "Password is required";
        return null;
    }
}